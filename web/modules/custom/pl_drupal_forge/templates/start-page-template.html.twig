{{ attach_library('pl_drupal_forge/main') }}
{{ attach_library('pl_drupal_forge/select2') }}
{{ attach_library('pl_drupal_forge/sweetalert2') }}

<div class="pl-card pl-div--width-600">
  <form id="test-runner-form" class="pl-form">
    <div class="pl-form-item">
      <label for="input-url" class="pl-form-item__label">URL</label>
      <input id="input-url" class="pl-form-item__input" type="text" name="url" value="{{ base_url }}">
    </div>
    <div class="pl-form-item">
      <label for="tags" class="pl-form-item__label">Tags</label>
      <select id="tags" class="pl-form-item__input field js-multiselect" name="tag[]" multiple="multiple">
        {% for tag in tags %}
          <option value="{{ tag }}">{{ tag }}</option>
        {% endfor %}
      </select>
    </div>
    <button id="the-button" class="pl-button pl-button--lg" onclick="invoke()">Start Tests</button>
  </form>

  {# {{ start_test_form }} #}
</div>

<script>
  function $DRAPI(url, init) {
    return $.ajax('/session/token').then((response) => {
      const token = response;
      init ||= {};
      init.headers ||= {};
      init.headers['X-CSRF-Token'] = token;
      return $.ajax(url, init);
    });
  }

  function invoke() {
    // disable the button to prevent occasional double-click
    $('#the-button').prop('disabled', true).text('Running...');
    // clear previous logs and report link if they exist
    $('#log-content').text('');
    $('#report-link').html('');
    // Hide placeholder text while tests are running
    $('#log-placeholder').css('display', 'none');
    // Scroll to the #test-results section
    document.getElementById('test-results').scrollIntoView({ behavior: 'smooth' });

    // form grep as a regex
    const tags = $.map($('#tags :selected'), e => e.value);
    const grep = !tags.length ? null : `(${tags.join('|')})`;
    $DRAPI('/pl_drupal_forge/invoke?_format=json', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      data: JSON.stringify({
        url: $('[name="url"]').val(),
        grep,
      }),
    }).then(() => {
      fetchLogs();
    }).catch(onError);
  }

  let lastTimestamp;

  function fetchLogs() {
    let input = '/pl_drupal_forge/logs';
    if (lastTimestamp) {
      input += `?timestamp=${lastTimestamp}`;
    }
    $.ajax(input).then((response) => {
      // automatically parsed by jQuery
      const data = response;
      if (data.status === 'running') {
        $('#log-pane').css('display', 'block');
        setTimeout(fetchLogs, 1000);
      }
      lastTimestamp = data.timestamp;

      if (!data.hasOwnProperty('logs')) {
        // bad bad response... don't know how to handle it...
        return;
      }
      for (const log of data.logs) {
        $('#log-content').append(
          `${new Date(log.timestamp).toLocaleString()}     ${log.message}\n`
        );
        $('#log-pane').scrollTop($('#log-pane').prop('scrollHeight'));
      }

      // If ended, enable the button again.
      if (data.status === 'ended' || data.status === 'timeout') {
        $('#the-button').prop('disabled', false).text('Start Tests');

        // If message is received, collect it.
        if (data.message) {
          let message = data.message;

          if (data.resultUri) {
            // If the message contains a result URI, show an alert.
            showAlert(data.message, data.resultUri);

            // Also add a report link above the log.
            const reportLink = `<a href="${data.resultUri}" target="_blank" class="pl-extlink">View Report</a>`;
            $('#report-link').html(reportLink);
          } else {
            // Otherwise, show the message in the messages list.
            showMessage(message, data.statusCode !== 200);
          }
        }
      }
    }).catch(onError);
  }

  // Function to show an alert message.
  function showAlert(messageText, reportLink) {
    Swal.fire({
      title: "Report is ready",
      titleText: "Report is ready",
      text: messageText,
      confirmButtonText: `View Report`,
      buttonsStyling: false,
      color: "var(--pl-neutral-darkest)",
      backdrop: "rgba(0, 0, 0, 0.6)",
      customClass: {
        popup:'pl-alert',
        confirmButton: 'pl-button pl-button--lg pl-sp-m-block-lg',
      }
    }).then((result) => {
      if (result.isConfirmed) {
        // User clicked the confirm button
        window.open(reportLink, '_blank');
      }
    });
  }

  // Show message in the messages list.
  // if isError is true, add error class.
  function showMessage(message, isError = true) {
    const $messages = $('.messages-list');
    $messages.removeClass('hidden');
    const $1 = $(`<div class="messages ${isError ? 'messages--error': ''}" style="white-space: pre-line;"></div>`).html(message);
    $messages.append($1);
    $messages[0].scrollIntoView();
  }

  function onError(error) {
    // in case error handle fails, we can see the original object in console.
    console.error(error);

    // Drupal returns response as a piece of HTML, so handle it here
    const message = error.responseText || '<strong>Unhandled error. Check out browser console for details.</strong>';
    showMessage(message);
  }
</script>
